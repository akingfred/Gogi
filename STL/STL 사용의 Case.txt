STL의 각 컨테이너들은 어느 경우의 사용하는것이 좋을까?

Vector : (LIFO)
연속 메모리 기반 컨테이너이면서 연속적인 선형 컨테이너다.
연속적인 메모리라는 말과 시퀀스 라는 말은 다르다. 메모리가 연속적이면 다음값이 메모리 주소의 1이 
더해진 주소에 있는 것이고 시퀀스 컨테이너라는것은 값이 들어간 순서대로 쌓인다는 것이다.
vector는 공간을 지정했을 경우 값이 다 차도 메모리가 늘어나지 않지만 지정하지 않는 경우에는
값이 찰때마다 메모리를 늘려간다.그리고 값을 수시로 삽입 삭제하는 곳에는 적절치 않다.
삽입 삭제때마다 값들이 하나씩 밀리면서 전체적인 메모리를 다시 써야하는 작업이 발생하기 때문

List : (중간 삽입이 용이)
vector와 달리 list는 값의 삽입 삭제에 매우 용이하다. 이것은 시퀀스 컨테이너지만 연속 메모리가 아니다.
각 값들은 어느 하나의 메모리에 위치하고 그 메모리들이 다음 값과 이전값의 주소로 연결되어 있기에
삽입 삭제에도 값을 밀어서 다시 쓸 필요없이 노드의 이전, 다음 주소값만 바꿔주면 되기 때문에 vector보다
작업이 적다.

String : (LIFO)
이건 말그대로 문자열을 다룰때 사용. 그리고 vector와 비슷하게 연속 메모리 기반 컨테이너이며 시퀀스 컨테이너이다.
그러므로 [] 연산자가 있어서 iterator가 없어도 값을 순회하는 것이 가능하다.

Deque : (FIFO)
연속 메모리 컨테이너이며 시퀀스 컨테이너.
값이 앞에나 뒤로 추가될일이 많을때 사용한다. vector와 달리 앞으로도 값이 빠져나갈 수 있기 때문에
중간이 값이 추가되도 vector보다 작업량이 적다.